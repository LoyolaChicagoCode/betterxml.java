package org.betterxml.handler;

import static org.junit.Assert.*;

import org.betterxml.handlers.ToXElementContentHandler;
import org.betterxml.xelement.*;
import org.junit.After;
import org.junit.Before;
import static org.junit.Assert.*;
import org.junit.Test;

/**
 * Tests the tree generated by the ToXElementContentHandler.  Here we repeatedly
 * prod the ToXElementContentHandler and inspect the tree that is returned.  
 *
 * TODO make this test more comprehensive
 */
public class ToXElementContentHandlerTest {

	private final String defaultNs =  "http://betterxml.org/test";
	private final String defaultPrefix = "bx";
	private final String rootName = "root";
	private final String rootQName = "bx:root";
	
    private ToXElementContentHandler handler;

    @Before
    public void setUp() throws Exception {
    	handler = new ToXElementContentHandler();
    }

    @After
    public void tearDown() throws Exception {
    	handler = null;
    }

    @Test
    public void testStartDocument() {
    	assertNull(handler.getDoc());
    	handler.startDocument();
    	assertNotNull(handler.getDoc());
    }
    
    @Test 
    public void testEndDocumentNoStart() throws Exception {
    	try {
    		handler.endDocument();
    	} catch(Exception e) { return; }
    	fail("Should throw exception. End document with no start.");
    }

    @Test
    public void testRootElement() throws Exception {
    	XElement root = this.rootElementDocumentWrapper(new Runnable() {
			public void run() { }
    	});
	
    	//tests
    	assertNotNull(root);
    	assertEquals(root.getAttributes().size(), 0);
    	assertEquals(root.getName(), rootName);
    }
    
    @Test
    public void testAttributes() throws Exception {
    	final String elementName = "twoAttributes";
    	XElement root = this.rootElementDocumentWrapper(new Runnable() {
    		public void run() {
    			handler.startElement("", elementName, elementName, 2);
    			handler.attribute("", "attribute1", "attribute1", "attribute1value");
    			handler.attribute("", "attribute2", "attribute2", "attribute2value");
    			handler.endElement("", elementName, elementName);
    		}
    	});
    	
    	XElement element = root.getChildrenElements().get(0);
    	System.out.println(element.getAttributes().toXML());
    	assertNotNull(element);
    	assertEquals(element.getName(), elementName);
    	assertEquals(element.getAttributes().size(), 2);
    	
    	String val1 = element.getAttributes().getAttributeValue("attribute1");
    	String val2 = element.getAttributes().getAttributeValue("attribute2");
    	String valNotThere = element.getAttributes().getAttributeValue("notthere");
    	
    	assertEquals("attribute1value", val1);
    	assertEquals("attribute2value", val2);
    	assertNull(valNotThere);
    }
    
//    @Test
//    public void testTooManyAttributesFailure() {
//    	try {
//    		this.rootElementDocumentWrapper(new Runnable() {
//    			public void run() {
//    				handler.startElement("", "element", "element", 1);
//    				handler.attribute("", "attribute1", "attribute1", "attribute1value");
//    				handler.attribute("", "attribute2", "attribute2", "attribute2value");
//    				handler.endElement("", "element", "element");
//    			}
//    		});
//    	} catch(Exception e) {
//    		return;
//    	}
//    	fail("Should not get here.  No exception thrown for sending too many attributes to an element!");
//    }
//    
//    @Test
//    public void testTooFewAttributesFailure() {
//    	try {
//    		this.rootElementDocumentWrapper(new Runnable() {
//    			public void run() {
//    				handler.startElement("", "element", "element", 3);
//    		
//    				handler.attribute("", "attribute1", "attribute1", "attribute1value");
//    				handler.attribute("", "attribute2", "attribute2", "attribute2value");
//    				handler.endElement("", "element", "element");
//    			}
//    		});
//    	} catch(Exception e) {
//    		return;
//    	}
//    	fail("Should not get here.  No exception thrown for sending too few attributes to an element!");
//    }
    
//    @Test
//    public void testNonMatchingElements() {
//    	try {
//    		this.rootElementDocumentWrapper(new Runnable() {
//    			public void run() {
//    				handler.startElement("", "element", "element", 0);
//    				handler.endElement("", "element_bad", "element_bad");
//    			}
//    		});
//    	} catch(Exception e) {
//    		return;
//    	}
//    	fail("Should not get here.  Corrupt stream with non-matching elements.");
//    }
    
    @Test
    public void testPCData() throws Exception {
    	final String elementName = "twoAttributes";
    	final String cdata = "this is my cdata";
    	XElement root = this.rootElementDocumentWrapper(new Runnable() {
    		public void run() {
    			handler.startElement("", elementName, elementName, 0);
    			handler.characters(cdata.length(), cdata);
    			handler.endElement("", elementName, elementName);
    		}
    	});
    	XElement element = root.getChildrenElements().get(0);
    	
    	assertNotNull(element);
    	assertEquals(element.getName(), elementName);
    	
    	XNode node = element.getChildren().get(0);
    	assertTrue(node instanceof XPCData);
    	XPCData cdataNode = (XPCData) node;
    	assertEquals(cdata, cdataNode.getText());
    }
    
    /**
     * Executes the given runnable in the middle of a document.
     * @param runMe
     */
    private void blankDocumentWrapper(Runnable runMe) {
    	handler.startDocument();
    	runMe.run();
    	handler.endDocument();
    }
    
    /**
     * Executes the runnable in a given document after creating a generic root element.
     * Return this root element for convenience.
     * @param runMe
     * @return Root element.
     */
    private XElement rootElementDocumentWrapper(final Runnable runMe) {
    	this.blankDocumentWrapper(new Runnable() {
			public void run() {
				handler.startElement(defaultNs, rootName, rootQName, 0);
				runMe.run();
				handler.endElement(defaultNs, rootName, rootQName);
			}
    	});
    	return handler.getDoc().getRootElement();
    }
}
